const titleParser = require('./titleParser')
const Todo = require('../models/Todo')

function Controller() {
  this.dropped = false;

  this.renderHome = async (req, res) => {
    //const todoItems = await Todo.find();
    console.log('dropped', this.dropped);
    res.render('index.ejs', {
      todos: this.dropped === false ? 'dropped is false' : 'dropped is true',
    });
    this.dropped = false
  };

  this.handleDrop = async (req, res) => {
    try {
      fileNames = req.body.names;
      parsedTitles = await titleParser.parse(fileNames);
      await Todo.create({ todo: parsedTitles, completed: false });
      this.dropped = true;
      res.redirect('/');
    } catch (err) {
      console.log(err);
    }
  };
}

module.exports = new Controller();




//From ChatGPT
//In an MVC (Model-View-Controller) architecture, it is not possible to access data generated by a POST request in a subsequent GET request without saving the data in a persistent storage such as a database. This is because the POST request and the GET request are independent of each other, and the data generated by the POST request is not automatically available to the GET request.

//what we need to do - store data in Mongo DB with the titleParser module
////access that data with a subsequent GET request and render it to the dom 
////access that data with a subsequent POST request and write the data to the xlsx document 

//Once all of that is done we can move on to building functionality that will actually read the doc 



//handleDrop: async (req, res) => {
    //    fileNames = req.body.names
    //    parsedTitles = await titleParser.parse(fileNames)
    //   const parsedTitlesJson = JSON.stringify(parsedTitles)
    //   console.log('one line above')
    //   DbController.write(parsedTitlesJson) 
  //    res.redirect('/renderWritten')
//  },